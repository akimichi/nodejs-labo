= データの種類と特徴

//lead{
この章では、プログラムの重要な要素であるデータにまつわる話題について解説します。
データには、いったん生成されたあとで変更されるものと変更が許されないものがあります。
さらにデータは変数に格納され、その変数を介してアクセスされます。
その際にも変数の内容が変更される場合があります。
本章では、データとデータに関係する話題ともに、こうした機能が関数型プログラミングに与える影響を考察していきます。


//}


=={type} 型とは何か

プログラムで表現することのできるデータの数はほとんど無数です。
例えば、@<code>{1,0.123, "a", "bbb", true} など、多種多様なデータが表現可能だからです。
この複雑な対象を整理するために「型」(データ型とも呼びます)という考えが導入されました。
例えば、@<code>{1, 0.3, -100,...} といった値はすべて数値型であり、@<code>{true,false}はいずれも論理（ブール値）を表わす型です。
いずれも数値型や真理値型といったレベルでは、こうした具体的な値が何であるかを気にしていないという点で型は抽象化のひとつです。

「型」は、私たちが中学時代に学んだ「集合」によく似た概念です。
「集合」とは、ある条件を満たすもの全体の集まりを意味します。
例えば、「10以下の自然数の集合」は、以下のようになります。

//texequation{
        集合A = \{ 0,1,2,3,4,5,6,7,8,9,10 \}
//}


一方で型には集合とは異なった側面があります。
まず第一に、同じ型に属するデータは同じ方法で生成されます。これは要素がどうやって作られるのかという点に集合が言及しないのと対照的です。◆◆◆宿題　この一文、ちょっと意味不明です。◆◆◆
例えば、整数は 0 に succ関数を繰り返し適用することで得られます。

//listnum[integer_construction][整数の作り方]{
#@maprange(vendor/functionaljs/test/chap04.spec.js, integer_construction)
      var succ = (n) => {
        return n + 1;
      };
      expect(
        succ(0)
      ).to.eql(
        1
      );
      expect(
        succ(succ(0))
      ).to.eql(
        2
      );
#@end
//}
